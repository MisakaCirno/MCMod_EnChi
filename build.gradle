buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        // 这些仓库仅用于 Gradle 插件，将其他仓库放在下面的 repository 块中
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
// 只编辑下面的代码，上面的代码添加并启用了 Forge 设置所需的必要内容。
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'

version = '1.18.2-0.0.0.1'
group = 'com.toolran.mc' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'EnChiXiaoBingGan-Forge'
// mod build之后的jar文件名由这里的信息组成
// 文件名的格式默认为${archivesBaseName}-${version}.jar

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
// Mojang 在 1.18+ 中向最终用户提供 Java 17，因此您的模组应该针对 Java 17。
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.

    // 映射可以随时更改，必须采用以下格式。
    // 渠道：版本：
    // 官方：MCVersion Mojang 映射文件中的官方字段/方法名称
    // 羊皮纸：YYYY.MM.DD-MCVersion 开放的社区源参数名称和 javadocs 层叠在官方之上
    //
    // 使用“官方”或“羊皮纸”映射时，您必须了解 Mojang 许可。
    // 有关更多信息，请参见：
    //
    // 羊皮纸是由 ParchmentMC 维护的非官方项目，与 MinecraftForge 分开
    // 需要额外的设置才能使用他们的映射：
    //
    // 使用非默认映射时要自担风险。 它们可能不总是有效。
    // 更改映射后，只需重新运行设置任务即可更新工作区。
    mappings channel: 'official', version: '1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
    // 目前，此位置无法从默认值更改。

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    // 默认运行配置。
    // 可以根据需要进行调整、删除或复制。
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.

            // 用户开发环境的推荐日志数据
            // 标记可以根据需要用逗号分隔添加/删除。
            // “SCAN”：用于扫描模组。
            // “REGISTRIES”：用于触发注册表事件。
            // “REGISTRYDUMP”：用于获取所有注册表的内容。
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels

            // 控制台的推荐日志级别
            // 您可以在此处设置各种级别。
            // 请阅读：
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            // 逗号分隔的命名空间列表，用于从中加载游戏测试。 空=所有命名空间。
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            // 逗号分隔的命名空间列表，用于从中加载游戏测试。 空=所有命名空间。
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.

        // 此运行配置启动 GameTestServer 并运行所有已注册的游戏测试，然后退出。
        // 默认情况下，当未提供游戏测试时，服务器将崩溃。
        // 默认情况下，/test 命令下的其他运行配置也启用了游戏测试系统。
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            // 指定用于数据生成的模组 ID，要输出结果资源的位置以及要查找现有资源的位置。
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
// 包含数据生成器生成的资源。
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // 将依赖项的仓库放在这里
    // ForgeGradle 会自动为您添加 Forge maven 和 Maven Central

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // 如果您在 ./libs 中有模组 jar 依赖项，可以像这样将它们声明为仓库：
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.

    // 指定要使用的 Minecraft 版本。 如果这是除“net.minecraft”之外的任何组，则假定该 dep 是 ForgeGradle“patcher”依赖项，并将应用其补丁。
    // userdev artifact 是一个特殊的名称，将对其应用各种转换。
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // 真实模组 deobf 依赖项示例 - 这些将被重新映射到当前映射
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // 添加 JEI API 作为编译依赖项
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // 添加完整的 JEI 模组作为运行时依赖项
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
    // 添加 registrate 作为依赖项

    // Examples using mod jars from ./libs
    // 使用 ./libs 中的模组 jar 的示例
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
// 用于将属性放入清单以在运行时读取的示例。
jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                // 我们是自己的第 1 版
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file

// 配置示例，允许使用 maven-publish 插件发布
// 这是重新混淆 jar 文件的首选方法
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// 但是，如果您在多项目构建中，开发时间需要 unobfed jar 文件，因此您可以通过执行将混淆延迟到发布来进行混淆
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    // 使用 UTF-8 字符集进行 Java 编译
}
